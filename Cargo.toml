[workspace]
members = [
  # Archives
  "file-formats/archives/wow-mpq",

  # World Data
  "file-formats/world-data/wow-adt",
  "file-formats/world-data/wow-wdl",
  "file-formats/world-data/wow-wdt",

  # Graphics
  "file-formats/graphics/wow-blp",
  "file-formats/graphics/wow-m2",
  "file-formats/graphics/wow-wmo",

  # Database
  "file-formats/database/wow-cdbc",

  # FFI
  "ffi/storm-ffi",

  # CLI
  "warcraft-rs",
]
resolver = "2"

[workspace.package]
version = "0.5.0"
authors = ["Daniel S. Reichenbach <daniel@kogito.network>"]
edition = "2024"
rust-version = "1.86"
license = "MIT OR Apache-2.0"
repository = "https://github.com/wowemulation-dev/warcraft-rs"
homepage = "https://github.com/wowemulation-dev/warcraft-rs"

[workspace.dependencies]
# Error handling
thiserror = "2.0"
anyhow = "1.0"

# Logging
log = "0.4"
env_logger = "0.11"

# Data structures and utilities
rand = "0.9"
tempfile = "3.20"
bitflags = "2.9"
bytes = "1.10"
memchr = "2.7"
glam = "0.30"
memmap2 = "0.9.5"
rayon = "1.10"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml_ng = "0.10"
binrw = "0.15.0"
csv = "1.3"

# CLI utilities
clap = { version = "4.5", features = ["derive"] }
colored = "3.0"
indicatif = "0.17"

# FFI
libc = "0.2.172"

# Development
criterion = { version = "0.6", features = ["html_reports"] }
pretty_assertions = "1.4"
proptest = "1.7"
assert_cmd = "2.0"
predicates = "3.1"
test-case = "3.3"

[workspace.lints.rust]
unsafe_code = "warn"

[workspace.lints.clippy]
all = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
cargo = { level = "warn", priority = -1 }
# Only the truly necessary allows
module_name_repetitions = "allow"        # wow_mpq::mpq is reasonable
multiple_crate_versions = "allow"        # Dependencies may pull in multiple versions
missing_errors_doc = "allow"             # Error types are self-documenting via thiserror
missing_const_for_fn = "allow"           # Not all functions can be const in practice
must_use_candidate = "allow"             # Not every pure function needs #[must_use]
missing_panics_doc = "allow"             # Panics are often unreachable in practice
too_many_lines = "allow"                 # Long functions are sometimes necessary
cast_sign_loss = "allow"                 # Binary format parsing requires unsigned casts
cast_possible_truncation = "allow"       # Binary format parsing requires size conversions
option_if_let_else = "allow"             # Match can be clearer than map_or
explicit_iter_loop = "allow"             # .iter() is sometimes more explicit
type_complexity = "allow"                # Complex types sometimes needed for async
cast_lossless = "allow"                  # as casts are fine for numeric conversions
uninlined_format_args = "allow"          # Format args don't always need inlining
single_match_else = "allow"              # Sometimes match is clearer than if let
unused_self = "allow"                    # &self can be for consistency even if unused
